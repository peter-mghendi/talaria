// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: render/v1/render.proto

package renderv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/peter-mghendi/talaria/internal/gen/render/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RenderServiceName is the fully-qualified name of the RenderService service.
	RenderServiceName = "render.v1.RenderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RenderServiceRenderProcedure is the fully-qualified name of the RenderService's Render RPC.
	RenderServiceRenderProcedure = "/render.v1.RenderService/Render"
	// RenderServiceRenderStreamProcedure is the fully-qualified name of the RenderService's
	// RenderStream RPC.
	RenderServiceRenderStreamProcedure = "/render.v1.RenderService/RenderStream"
)

// RenderServiceClient is a client for the render.v1.RenderService service.
type RenderServiceClient interface {
	Render(context.Context, *connect.Request[v1.RenderRequest]) (*connect.Response[v1.RenderResponse], error)
	RenderStream(context.Context) *connect.BidiStreamForClient[v1.RenderStreamRequest, v1.RenderStreamResponse]
}

// NewRenderServiceClient constructs a client for the render.v1.RenderService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRenderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RenderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	renderServiceMethods := v1.File_render_v1_render_proto.Services().ByName("RenderService").Methods()
	return &renderServiceClient{
		render: connect.NewClient[v1.RenderRequest, v1.RenderResponse](
			httpClient,
			baseURL+RenderServiceRenderProcedure,
			connect.WithSchema(renderServiceMethods.ByName("Render")),
			connect.WithClientOptions(opts...),
		),
		renderStream: connect.NewClient[v1.RenderStreamRequest, v1.RenderStreamResponse](
			httpClient,
			baseURL+RenderServiceRenderStreamProcedure,
			connect.WithSchema(renderServiceMethods.ByName("RenderStream")),
			connect.WithClientOptions(opts...),
		),
	}
}

// renderServiceClient implements RenderServiceClient.
type renderServiceClient struct {
	render       *connect.Client[v1.RenderRequest, v1.RenderResponse]
	renderStream *connect.Client[v1.RenderStreamRequest, v1.RenderStreamResponse]
}

// Render calls render.v1.RenderService.Render.
func (c *renderServiceClient) Render(ctx context.Context, req *connect.Request[v1.RenderRequest]) (*connect.Response[v1.RenderResponse], error) {
	return c.render.CallUnary(ctx, req)
}

// RenderStream calls render.v1.RenderService.RenderStream.
func (c *renderServiceClient) RenderStream(ctx context.Context) *connect.BidiStreamForClient[v1.RenderStreamRequest, v1.RenderStreamResponse] {
	return c.renderStream.CallBidiStream(ctx)
}

// RenderServiceHandler is an implementation of the render.v1.RenderService service.
type RenderServiceHandler interface {
	Render(context.Context, *connect.Request[v1.RenderRequest]) (*connect.Response[v1.RenderResponse], error)
	RenderStream(context.Context, *connect.BidiStream[v1.RenderStreamRequest, v1.RenderStreamResponse]) error
}

// NewRenderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRenderServiceHandler(svc RenderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	renderServiceMethods := v1.File_render_v1_render_proto.Services().ByName("RenderService").Methods()
	renderServiceRenderHandler := connect.NewUnaryHandler(
		RenderServiceRenderProcedure,
		svc.Render,
		connect.WithSchema(renderServiceMethods.ByName("Render")),
		connect.WithHandlerOptions(opts...),
	)
	renderServiceRenderStreamHandler := connect.NewBidiStreamHandler(
		RenderServiceRenderStreamProcedure,
		svc.RenderStream,
		connect.WithSchema(renderServiceMethods.ByName("RenderStream")),
		connect.WithHandlerOptions(opts...),
	)
	return "/render.v1.RenderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RenderServiceRenderProcedure:
			renderServiceRenderHandler.ServeHTTP(w, r)
		case RenderServiceRenderStreamProcedure:
			renderServiceRenderStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRenderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRenderServiceHandler struct{}

func (UnimplementedRenderServiceHandler) Render(context.Context, *connect.Request[v1.RenderRequest]) (*connect.Response[v1.RenderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("render.v1.RenderService.Render is not implemented"))
}

func (UnimplementedRenderServiceHandler) RenderStream(context.Context, *connect.BidiStream[v1.RenderStreamRequest, v1.RenderStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("render.v1.RenderService.RenderStream is not implemented"))
}
