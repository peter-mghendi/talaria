name: Release

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write

jobs:
  build:
    name: Build
    uses: ./.github/workflows/build.yml

  prepare:
    name: Prepare
    needs: [build]
    runs-on: ubuntu-latest
    outputs:
      release: ${{ steps.resolve.outputs.release }}
      version: ${{ steps.resolve.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Resolve version
        id: resolve
        run: |
          # Check current version in .version file
          if [ ! -f .version ]; then
            echo ".version file not found"
            exit 1
          fi
          
          CURRENT=$(cat .version)
          echo "[INFO] Requested release v$CURRENT."
          
          # Validate semantic versioning (numeric only for major.minor.patch)
          if ! [[ $CURRENT =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format"
            exit 1
          fi
          
          # Get latest release version
          LATEST=$(gh release list --limit 1 | awk '{print $1}' | sed 's/^v//')
          echo "[INFO] Latest release is v$LATEST."
          
          # Compare versions
          if [ -z "$LATEST" ] || [ "$(printf '%s\n' "$CURRENT" "$LATEST" | sort -V | tail -n1)" = "$CURRENT" ] && [ "$CURRENT" != "$LATEST" ]; then
            echo "[INFO] Releasing version v$CURRENT."
            echo "release=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT" >> $GITHUB_OUTPUT
          else
            echo "[INFO] Skipping release for version v$CURRENT."
            echo "release=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    needs: [prepare]
    if: needs.prepare.outputs.release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Create tag
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git tag "v${{ needs.prepare.outputs.version }}"
          git push origin "v${{ needs.prepare.outputs.version }}"

      - name: Install QEMU static binaries
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate against GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Authenticate against DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Release
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
